

@mixin media($size) {
	@if $size == tablet {
		@media all and (min-width:768px) and (max-width:1024px) { @content; }
	} @else if $size == mobile {
		@media (max-width: 767px) { @content; }
	} @else if $size == small {
		@media (min-width: 319px) { @content; }
	} @else if $size == pc {
		@media (min-width: 1200px) { @content; }
	} @else if $size == big-desktop-up {
		@media (min-width: 1800px) { @content; }
	}
}

// REM 처리
@mixin rem($property, $values) {
	// Create a couple of empty lists as output buffers.
	$base-font-size: 16px; // should be consistent with your html/body font-size
	$px-values: ();
	$rem-values: ();

	// Loop through the $values list
	@each $value in $values {
	  // For each property value, if it's in rem or px, derive both rem and
	  // px values for it and add those to the end of the appropriate buffer.
	  // Ensure all pixel values are rounded to the nearest pixel.
		@if $value == 0 or $value == 0px {
			// 0 -- use it without a unit
			$px-values: join($px-values, 0);
			$rem-values: join($rem-values, 0);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			// px value given - calculate rem value from base-font-size
			$new-rem-value: $value / $base-font-size;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, #{$new-rem-value}rem);
		} @else {
			// unitless value - use those directly as rem and calculate the px-fallback
			$px-values: join($px-values, round($value * $base-font-size));
			$rem-values: join($rem-values, #{$value}rem);
		}
	}
	// output the converted rules
	#{$property}: $px-values; // 이것은 px로 변환
	#{$property}: $rem-values;
}
